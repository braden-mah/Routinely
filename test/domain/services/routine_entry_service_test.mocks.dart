// Mocks generated by Mockito 5.0.17 from annotations
// in routinely/test/domain/services/routine_entry_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:routinely/data/repositories/routine_entry_repository.dart'
    as _i2;
import 'package:routinely/domain/entities/routine_entry_entity.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [RoutineEntryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoutineEntryRepository extends _i1.Mock
    implements _i2.RoutineEntryRepository {
  MockRoutineEntryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> addRoutineEntry(_i4.RoutineEntry? routineEntry) =>
      (super.noSuchMethod(Invocation.method(#addRoutineEntry, [routineEntry]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> deleteRoutineEntry(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteRoutineEntry, [id]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i4.RoutineEntry>> getAllRoutineEntries(int? routineId) =>
      (super.noSuchMethod(Invocation.method(#getAllRoutineEntries, [routineId]),
              returnValue:
                  Future<List<_i4.RoutineEntry>>.value(<_i4.RoutineEntry>[]))
          as _i3.Future<List<_i4.RoutineEntry>>);
  @override
  _i3.Future<bool> updateRoutineEntry(
          int? id, _i4.RoutineEntry? routineEntry) =>
      (super.noSuchMethod(
          Invocation.method(#updateRoutineEntry, [id, routineEntry]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
